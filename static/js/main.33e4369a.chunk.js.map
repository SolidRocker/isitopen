{"version":3,"sources":["reducers/entriesReducer.js","reducers/collectionReducer.js","reducers/loginReducer.js","reducers/index.js","actions/types.js","components/store.js","components/filterDropdown.js","components/db.js","components/filter.js","actions/entryActions.js","actions/loginActions.js","components/entryList.js","components/collectionList.js","actions/collectionActions.js","components/login.js","components/collection.js","App.js","serviceWorker.js","index.js"],"names":["initialState","items","IDs","filterName","filterDay","filterTime","filterType","filterCount","collectionState","shareList","rList","loginState","cUser","cUserEmail","isLoggedIn","combineReducers","entries","state","arguments","length","undefined","action","type","Object","objectSpread","payload","payloadID","collections","friendList","friendListCIDs","friendListEmails","payloadEmails","login","payloadEmail","middleware","thunk","store","createStore","rootReducer","applyMiddleware","apply","filterTypes","value","label","filterNames","filterDays","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","db","Filter","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSelectType","option","populateNameList","setState","fTypeID","fTypeString","filterUpdateType","resetFilters","onSelectName","filterEntryByName","fNameString","onSelectDay","filterEntryByDay","substring","toString","toLowerCase","fDayString","onSelectTime","filterEntryByTime","fTimeString","bIsNamesPopulate","bind","assertThisInitialized","isDuplicate","i","entrylength","j","name","push","react_default","a","createElement","className","disp","dist_default","disabled","arrowClosed","io","arrowOpen","placeholder","controlClassName","options","onChange","menuClassName","renderFilterSubHeader1","renderFilterSubHeader2","renderFilterSubDropdown1","renderFilterSubDropdown2","Component","connect","dispatch","day","time","getUser","user","collection","doc","get","then","exists","data","EntryList","renderEntry","entry","rID","generateRandomID","key","dispHours","style","textAlign","renderAddList","fetchEntry","randomID","possible","charAt","Math","floor","random","today","openTime","closeTime","openhours","hasOwnProperty","default","closehours","nextDay","getNextDayString","lists","isCreated","cID","entryName","closeCallBack","_this2","doesExist","restaurants","reactjs_popup_es","lockScroll","trigger","modal","confirm","onClick","addToList","_this3","close","renderAddCollectionText","renderAddListButton","_this4","map","isOpen","allEntries","renderEntries","renderHeader","allIDs","snapshot","docs","forEach","eData","eID","id","count","cName","callBack","set","CollectionList","shareWithFriend","friendEmail","friendExists","userIDs","hasList","shares","email","pTitle","pDesc","displayPopup","textInput","renameListInput","isShared","sharedName","sharedID","sharedEmail","createList","changeName","createListTextChange","shareListUserChange","renameListChange","initList","closeCallBackMain","closeCallBackSub","renameList","allRestaurants","restaurant","index","tmpRestaurants","foundUser","users","event","target","viewSharedList","viewList","renderShareButton","_this5","displayGenericPopup","_this6","open","_this7","getStyling","onClickList","renderListName","processListSelection","cFriendEmail","fID","friendData","newListName","console","log","Login","onClickLogin","userName","isNewUser","noofUsers","inputEmail","search","cUsername","addUser","loginUser","createListEmailChange","userEmail","updateUser","getFriendShareList","colSpan","renderLoginButton","renderUserLabel","status","newEmail","newName","list","allShared","Collection","renderEachShared","collectionName","components_collectionList","fetchUsers","sList","isFriend","renderAllShared","components_login","renderCollectionHeader","renderCollectionTable","renderSharedHeader","renderSharedTable","allUsers","uData","uID","addShareList","cList","newEntry","App","es","components_collection","components_filter","components_entryList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.33e4369a.chunk.js","sourcesContent":["import {\r\n    FETCH_ENTRIES,\r\n    FILTER_ENTRIES_NAME,\r\n    FILTER_ENTRIES_DAY,\r\n    FILTER_ENTRIES_TIME,\r\n    FILTER_UPDATE_TYPE,\r\n    FILTER_RESET_NAME,\r\n    FILTER_RESET_DAYTIME,\r\n    FILTER_COUNT  } from '../actions/types';\r\n\r\nconst initialState = {\r\n   items: [],\r\n   IDs: [],\r\n   filterName: \"\",\r\n   filterDay: \"\",\r\n   filterTime: -1,\r\n   filterType: -1,\r\n   filterCount: 0\r\n}\r\n\r\nexport default function(state = initialState, action) {\r\n    switch(action.type) {\r\n        case FETCH_ENTRIES:\r\n            return {\r\n                ...state,\r\n                items: action.payload,\r\n                IDs: action.payloadID\r\n            }\r\n\r\n        case FILTER_ENTRIES_NAME:\r\n            return {\r\n                ...state,\r\n                filterName: action.payload,\r\n            }\r\n\r\n        case FILTER_ENTRIES_DAY:\r\n            return {\r\n                ...state,\r\n                filterDay: action.payload,\r\n            }\r\n\r\n        case FILTER_ENTRIES_TIME:\r\n            return {\r\n                ...state,\r\n                filterTime: action.payload,\r\n            }\r\n\r\n        case FILTER_UPDATE_TYPE:\r\n            return {\r\n                ...state,\r\n                filterType: action.payload,\r\n            }\r\n\r\n        case FILTER_RESET_NAME:\r\n            return {\r\n                ...state,\r\n                filterName: \"\",\r\n            }\r\n\r\n        case FILTER_RESET_DAYTIME:\r\n            return {\r\n                ...state,\r\n                filterDay: \"\",\r\n                filterTime: -1\r\n            }\r\n\r\n        case FILTER_COUNT:\r\n            return {\r\n                ...state,\r\n                filterCount: action.payload\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import {\r\n    FETCH_USERS,\r\n    GET_SHARE_LIST,\r\n    RENAME_LIST,\r\n    ADD_SHARE_LIST\r\n } from '../actions/types';\r\n    \r\nconst collectionState = {\r\n    items: [],\r\n    IDs: [],\r\n    shareList: [],\r\n    rList: []\r\n}\r\n\r\nexport default function(state = collectionState, action) {\r\n    switch(action.type) {\r\n        case FETCH_USERS:\r\n            return {\r\n                ...state,\r\n                items: action.payload,\r\n                IDs: action.payloadID\r\n            }\r\n\r\n        case RENAME_LIST:\r\n            return {\r\n                ...state,\r\n                friendList: action.payload,\r\n                friendListCIDs: action.friendListCIDs,\r\n                friendListEmails: action.payloadEmails\r\n            }\r\n\r\n        case GET_SHARE_LIST:\r\n            return {\r\n                ...state,\r\n                shareList: action.payload\r\n            }\r\n\r\n        case ADD_SHARE_LIST:\r\n            return {\r\n                ...state,\r\n                rList: action.payload\r\n            }\r\n\r\n        default:\r\n            return state;\r\n        }\r\n}","import {\r\n    LOGIN_USER,\r\n    UPDATE_USER,\r\n    GET_USER } from '../actions/types';\r\n    \r\nconst loginState = {\r\n    cUser: {},\r\n    cUserEmail: \"\",\r\n    isLoggedIn : false\r\n}\r\n\r\nexport default function(state = loginState, action) {\r\n    switch(action.type) {\r\n        case LOGIN_USER:\r\n            return {\r\n                ...state,\r\n                isLoggedIn: action.payload\r\n            }\r\n\r\n        case UPDATE_USER:\r\n            return {\r\n                ...state,\r\n                cUser: action.payload,\r\n                cUserEmail: action.payloadEmail\r\n            }\r\n\r\n        case GET_USER:\r\n            return {\r\n                ...state,\r\n                cUser: action.payload\r\n            }\r\n\r\n        default:\r\n            return state;\r\n        }\r\n}","import { combineReducers } from 'redux';\r\nimport entriesReducer from './entriesReducer';\r\nimport collectionReducer from './collectionReducer';\r\nimport loginReducer from './loginReducer';\r\n\r\nexport default combineReducers({\r\n    entries: entriesReducer,\r\n    collections: collectionReducer,\r\n    login: loginReducer\r\n})","export const FETCH_ENTRIES = 'FETCH_ENTRIES';\r\nexport const FILTER_ENTRIES_NAME = 'FILTER_ENTRIES_NAME';\r\nexport const FILTER_ENTRIES_DAY = 'FILTER_ENTRIES_DAY';\r\nexport const FILTER_ENTRIES_TIME = 'FILTER_ENTRIES_TIME';\r\nexport const FILTER_UPDATE_TYPE = 'UPDATE_FILTER_TYPE';\r\nexport const FILTER_RESET_NAME = 'FILTER_RESET_NAME';\r\nexport const FILTER_RESET_DAYTIME = 'FILTER_RESET_DAYTIME';\r\nexport const FILTER_COUNT = 'FILTER_COUNT';\r\n\r\nexport const FETCH_USERS = 'FETCH_USERS';\r\nexport const LOGIN_USER = 'LOGIN_USER';\r\nexport const UPDATE_USER = 'UPDATE_USER';\r\nexport const GET_USER = 'GET_USER';\r\nexport const GET_SHARE_LIST = 'GET_SHARE_LIST';\r\nexport const ADD_SHARE_LIST = 'ADD_SHARE_LIST';\r\n\r\nexport const CREATE_LIST = 'CREATE_LIST';\r\nexport const UPDATE_LIST = 'UPDATE_LIST';\r\nexport const RENAME_LIST = 'RENAME_LIST';\r\nexport const REMOVE_FROM_LIST = 'UPDATE_LIST';","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from '../reducers';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    applyMiddleware(...middleware)\r\n);\r\n\r\nexport default store;","export const filterTypes = [\r\n    { value: 0, label: \"By Name\"},\r\n    { value: 1, label: \"By Time\"}\r\n];\r\n\r\nexport const filterNames = [];\r\n\r\nexport const filterDays = [\r\n    {value: 0, label: \"Sunday\"},\r\n    {value: 1, label: \"Monday\"},\r\n    {value: 2, label: \"Tuesday\"},\r\n    {value: 3, label: \"Wednesday\"},\r\n    {value: 4, label: \"Thursday\"},\r\n    {value: 5, label: \"Friday\"},\r\n    {value: 6, label: \"Saturday\"},\r\n]\r\n\r\n// We store each hour as an entry in the drop down list, with a numberical value to check time.\r\nexport const filterTime = [\r\n    { value: 0, label: \"12:00am - 1:00am\"},\r\n    { value: 100, label: \"1:00am - 2:00am\"},\r\n    { value: 200, label: \"2:00am - 3:00am\"},\r\n    { value: 300, label: \"3:00am - 4:00am\"},\r\n    { value: 400, label: \"4:00am - 5:00am\"},\r\n    { value: 500, label: \"5:00am - 6:00am\"},\r\n    { value: 600, label: \"6:00am - 7:00am\"},\r\n    { value: 700, label: \"7:00am - 8:00am\"},\r\n    { value: 800, label: \"8:00am - 9:00am\"},\r\n    { value: 900, label: \"9:00am - 10:00am\"},\r\n    { value: 1000, label: \"10:00am - 11:00am\"},\r\n    { value: 1100, label: \"11:00am - 12:00pm\"},\r\n    { value: 1210, label: \"12:00pm - 1:00pm\"},\r\n    { value: 1300, label: \"1:00pm - 2:00pm\"},\r\n    { value: 1400, label: \"2:00pm - 3:00pm\"},\r\n    { value: 1500, label: \"3:00pm - 4:00pm\"},\r\n    { value: 1600, label: \"4:00pm - 5:00pm\"},\r\n    { value: 1700, label: \"5:00pm - 6:00pm\"},\r\n    { value: 1800, label: \"6:00pm - 7:00pm\"},\r\n    { value: 1900, label: \"7:00pm - 8:00pm\"},\r\n    { value: 2000, label: \"8:00pm - 9:00pm\"},\r\n    { value: 2100, label: \"9:00pm - 10:00pm\"},\r\n    { value: 2200, label: \"10:00pm - 11:00pm\"},\r\n    { value: 2300, label: \"11:00pm - 12:00am\"},\r\n];","import * as firebase from 'firebase';\r\n\r\nvar config = {\r\n    apiKey: \"AIzaSyBInD94CgoHB6Z6tR1qooFIahjVIUd6uMg\",\r\n    authDomain: \"glints-d7a40.firebaseapp.com\",\r\n    databaseURL: \"https://glints-d7a40.firebaseio.com\",\r\n    projectId: \"glints-d7a40\",\r\n    storageBucket: \"glints-d7a40.appspot.com\",\r\n    messagingSenderId: \"528186558960\"\r\n};\r\n\r\nfirebase.initializeApp(config);\r\nvar db = firebase.firestore();\r\n\r\nexport default db;","import React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Dropdown from 'react-dropdown'\r\nimport { filterTypes, filterNames, filterDays, filterTime } from './filterDropdown';\r\nimport { IoIosArrowDown, IoIosArrowUp } from 'react-icons/io';\r\nimport '../css/filter.css'\r\n\r\nimport {\r\n    filterEntryByName,\r\n    filterEntryByDay,\r\n    filterEntryByTime,\r\n    filterUpdateType } from '../actions/entryActions';\r\n\r\nclass Filter extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            fTypeID: -1,\r\n            fTypeString: \"\",\r\n            fNameString: \"\",\r\n            fDayString: \"\",\r\n            fTimeString: \"\",\r\n            bIsNamesPopulate: false\r\n        }\r\n        this.onSelectType = this.onSelectType.bind(this);\r\n        this.onSelectName = this.onSelectName.bind(this);\r\n        this.onSelectDay = this.onSelectDay.bind(this);\r\n        this.onSelectTime = this.onSelectTime.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.filterUpdateType(this.state.fTypeID);\r\n    }\r\n\r\n    resetFilters() {\r\n        this.setState({fNameString: \"\",\r\n                        fDayString: \"\",\r\n                        fTimeString: \"\"});\r\n    }\r\n\r\n    // On first trigger, populates the \"name\" dropdown list with alll the resturant names.\r\n    populateNameList() {\r\n\r\n        if(this.state.bIsNamesPopulate)\r\n            return;\r\n\r\n        var isDuplicate = false;\r\n        for(var i = 0; i < this.props.entrylength; ++i) {\r\n\r\n            // We check this entry with all the existing entries for duplicates, and only insert if it is not.\r\n            isDuplicate = false;\r\n            for(var j = 0; j < i; ++j) {\r\n                if(i === j || this.props.entries[i].name === this.props.entries[j].name) {\r\n                    isDuplicate = true;\r\n                    break;\r\n                }\r\n            }\r\n            if(!isDuplicate) {\r\n                let name = {value:i, label:this.props.entries[i].name};\r\n                filterNames.push(name);\r\n            }\r\n        }\r\n        this.setState({bIsNamesPopulate: true});\r\n    }\r\n\r\n    // Choose the type of filter to use.\r\n    onSelectType = (option) => {\r\n        this.populateNameList();\r\n        this.setState({fTypeID: option.value, fTypeString: option.label}, () => {\r\n            this.props.filterUpdateType(this.state.fTypeID);\r\n            this.resetFilters();\r\n        });\r\n    }\r\n\r\n    // Choose the name to filter.\r\n    onSelectName = (option) => {\r\n        this.props.filterEntryByName(option.label);\r\n        this.setState({fNameString: option.label});\r\n    }\r\n\r\n    // Choose the day to filter.\r\n    onSelectDay = (option) => {\r\n        this.props.filterEntryByDay(option.label.substring(0, 3).toString().toLowerCase()); // Take only the first 3 letters of the day\r\n        this.setState({fDayString: option.label});\r\n    }\r\n\r\n    // Choose the time to filter.\r\n    onSelectTime = (option) => {\r\n        this.props.filterEntryByTime(option.value);\r\n        this.setState({fTimeString: option.label});\r\n    }\r\n\r\n    renderFilterSubHeader1() {\r\n        let disp = null;\r\n\r\n        // Special case for filtering by Day Time\r\n        if(this.state.fTypeID === 0) {\r\n            disp = <th className=\"Dropdown-header-rname\">FILTER NAME</th>\r\n        }\r\n        else if(this.state.fTypeID === 1) {\r\n            disp = <th className=\"Dropdown-header-day\">FILTER DAY</th>\r\n        }\r\n        else {\r\n            disp = <th className=\"Dropdown-header-rname\">FILTER LIST</th>\r\n        }\r\n        return disp;\r\n    }\r\n\r\n    // This subheader is currently only used for TIME field.\r\n    renderFilterSubHeader2() {\r\n        let disp = null;\r\n\r\n        // Special case for filtering by Day Time. We do not need to display text here, only update the table CSS.\r\n        if(this.state.fTypeID === 1) {\r\n            disp = <th className=\"Dropdown-header-time\">FILTER TIME</th>\r\n        }\r\n        return disp;\r\n    }\r\n\r\n    renderFilterSubDropdown1() {\r\n        let disp = null;\r\n\r\n        // Default disabled filter. Will only appear when page loads, before user chooses an option.\r\n        if(this.state.fTypeID === -1) {\r\n            disp =\r\n            <td> <Dropdown disabled\r\n                    arrowClosed={<span className=\"Dropdown-icon\"><IoIosArrowDown/></span>}\r\n                    arrowOpen={<span className=\"Dropdown-icon\"><IoIosArrowUp/></span>}\r\n                    className=\"Dropdown-class-disabled\"\r\n                    placeholder=\"Choose A FilterType...\"\r\n                    controlClassName=\"Dropdown-control\"\r\n                />\r\n            </td>\r\n        }\r\n\r\n        // Filter by Name\r\n        else if(this.state.fTypeID === 0) {\r\n            disp = \r\n            <td> <Dropdown\r\n                    arrowClosed={<span className=\"Dropdown-icon\"><IoIosArrowDown/></span>}\r\n                    arrowOpen={<span className=\"Dropdown-icon\"><IoIosArrowUp/></span>}\r\n                    options={filterNames}\r\n                    onChange={this.onSelectName}\r\n                    value={this.state.fNameString}\r\n                    placeholder=\"Filter Name...\"\r\n                    className=\"Dropdown-class-rname\"\r\n                    controlClassName=\"Dropdown-control\"\r\n                    menuClassName=\"Dropdown-menu-name\"\r\n                />\r\n            </td>\r\n        }\r\n\r\n        // Filter by Day and Time\r\n        else if(this.state.fTypeID === 1) {\r\n            disp = \r\n            <td> <Dropdown\r\n                    arrowClosed={<span className=\"Dropdown-icon\"><IoIosArrowDown/></span>}\r\n                    arrowOpen={<span className=\"Dropdown-icon\"><IoIosArrowUp/></span>}\r\n                    options={filterDays}\r\n                    onChange={this.onSelectDay}\r\n                    value={this.state.fDayString}\r\n                    placeholder=\"Filter Day...\"\r\n                    className=\"Dropdown-class-day\"\r\n                    controlClassName=\"Dropdown-control\"\r\n                    menuClassName=\"Dropdown-menu-day\"\r\n                />\r\n            </td>\r\n        }\r\n        return disp;\r\n    }\r\n\r\n    // This subdropdown is currently only used for TIME field.\r\n    renderFilterSubDropdown2() {\r\n        let disp = null;\r\n\r\n        if(this.state.fTypeID === 1) {\r\n            disp = \r\n            <td> <Dropdown\r\n                arrowClosed={<span className=\"Dropdown-icon\"><IoIosArrowDown/></span>}\r\n                arrowOpen={<span className=\"Dropdown-icon\"><IoIosArrowUp/></span>}\r\n                options={filterTime}\r\n                onChange={this.onSelectTime}\r\n                value={this.state.fTimeString}\r\n                placeholder=\"Filter Time...\"\r\n                className=\"Dropdown-class-time\"\r\n                controlClassName=\"Dropdown-control\"\r\n                menuClassName=\"Dropdown-menu-time\"\r\n                />\r\n            </td>\r\n        }\r\n        return disp;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <table className=\"Dropdown-section\">\r\n                <tbody>\r\n                    <tr>\r\n                        <th className=\"Dropdown-header-type\">FILTER TYPE</th>\r\n                        {this.renderFilterSubHeader1()}\r\n                        {this.renderFilterSubHeader2()}\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <td> <Dropdown\r\n                            arrowClosed={<span className=\"Dropdown-icon\"><IoIosArrowDown/></span>}\r\n                            arrowOpen={<span className=\"Dropdown-icon\"><IoIosArrowUp/></span>}\r\n                            options={filterTypes}\r\n                            onChange={this.onSelectType}\r\n                            value={this.state.fTypeString}\r\n                            placeholder=\"Filter Type...\"\r\n                            className=\"Dropdown-class-type\"\r\n                            controlClassName=\"Dropdown-control\"\r\n                            menuClassName=\"Dropdown-menu-type\"\r\n                            />\r\n                        </td>\r\n\r\n                        {this.renderFilterSubDropdown1()}\r\n                        {this.renderFilterSubDropdown2()}\r\n                    </tr>\r\n\r\n                </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    entries: state.entries.items,\r\n    entrylength: state.entries.items.length,\r\n    filterName: state.entries.filterName,\r\n    filterCount: state.entries.filterCount\r\n});\r\n\r\nexport default connect(mapStateToProps, {filterEntryByName, filterEntryByDay, filterEntryByTime, filterUpdateType})(Filter);","import {\r\n    FETCH_ENTRIES,\r\n    FILTER_ENTRIES_NAME,\r\n    FILTER_ENTRIES_DAY,\r\n    FILTER_ENTRIES_TIME,\r\n    FILTER_UPDATE_TYPE,\r\n    FILTER_RESET_NAME,\r\n    FILTER_RESET_DAYTIME,\r\n    FILTER_COUNT } from './types';\r\nimport db from '../components/db';\r\n\r\nexport const fetchEntry = () => dispatch => {\r\n\r\n    const allEntries = [];\r\n    const allIDs = [];\r\n    db.collection(\"restaurants\").get().then(snapshot => {\r\n        snapshot.docs.forEach(doc => {\r\n            let eData = doc.data();\r\n            let eID = doc.id;\r\n            allEntries.push(eData);\r\n            allIDs.push(eID);\r\n        })\r\n    })\r\n    .then(() => dispatch({\r\n        type: FETCH_ENTRIES,\r\n        payload: allEntries,\r\n        payloadID: allIDs\r\n    }));\r\n}\r\n\r\nexport const filterEntryByName = (name) => dispatch => {\r\n\r\n    dispatch({\r\n        type: FILTER_ENTRIES_NAME,\r\n        payload: name\r\n    });\r\n}\r\n\r\nexport const filterEntryByDay = (day) => dispatch => {\r\n\r\n    dispatch({\r\n        type: FILTER_ENTRIES_DAY,\r\n        payload: day\r\n    });\r\n}\r\n\r\nexport const filterEntryByTime = (time) => dispatch => {\r\n\r\n    dispatch({\r\n        type: FILTER_ENTRIES_TIME,\r\n        payload: time\r\n    });\r\n}\r\n\r\nexport const filterUpdateType = (type) => dispatch => {\r\n\r\n    dispatch({\r\n        type: FILTER_UPDATE_TYPE,\r\n        payload: type\r\n    });\r\n\r\n    dispatch({\r\n        type: FILTER_RESET_NAME\r\n    });\r\n\r\n    dispatch({\r\n        type: FILTER_RESET_DAYTIME\r\n    });\r\n}\r\n\r\nexport const filterCount = (count) => dispatch => {\r\n    dispatch({\r\n        type: FILTER_COUNT,\r\n        payload: count\r\n    });\r\n}\r\n\r\nexport const addToList = (cUserEmail, cID, cName, callBack) => dispatch => {\r\n\r\n    var user = {};\r\n    db.collection(\"users\").doc(cUserEmail).get().then( function(doc) {\r\n        if(doc.exists) {\r\n            user = doc.data(); \r\n        }   \r\n    })\r\n    .then(() => {\r\n        user.lists[cID].restaurants.push(cName);\r\n    })\r\n    .then(() => {\r\n        db.collection(\"users\").doc(cUserEmail).set(user);\r\n    })\r\n    .then(() => {\r\n        callBack(cUserEmail);\r\n    })\r\n}","import { LOGIN_USER, UPDATE_USER, GET_USER } from './types';\r\nimport db from '../components/db';\r\n\r\nexport const loginUser = (status) => dispatch => {\r\n\r\n    dispatch({\r\n        type: LOGIN_USER,\r\n        payload: status\r\n    })\r\n}\r\n\r\nexport const addUser = (newEmail, newName) => dispatch => {\r\n\r\n    // DB Structure (list) for each new user.\r\n    var list = {\r\n        name: \"Create New...\",\r\n        isCreated: false,\r\n        restaurants: [],\r\n    };\r\n\r\n    var user = {\r\n        lists: [list, list, list],\r\n        shares: [],\r\n        name: newName\r\n    }\r\n\r\n    db.collection(\"users\").doc(newEmail)\r\n    .set(user)\r\n    .then(() => dispatch({\r\n        type: UPDATE_USER,\r\n        payload: user,\r\n        payloadEmail: newEmail\r\n    }))\r\n    .then(() =>  dispatch({\r\n        type: LOGIN_USER,\r\n        payload: true\r\n    }));\r\n}\r\n\r\nexport const updateUser = (user, userEmail) => dispatch => {\r\n    dispatch({\r\n        type: UPDATE_USER,\r\n        payload: user,\r\n        payloadEmail: userEmail\r\n    });\r\n}\r\n\r\nexport const getUser = (cUserEmail) => dispatch => {\r\n\r\n    var user = {};\r\n    db.collection(\"users\").doc(cUserEmail).get().then( function(doc) {\r\n        if(doc.exists) {\r\n            user = doc.data(); \r\n        }\r\n    })\r\n    .then(() => dispatch({\r\n        type: GET_USER,\r\n        payload: user,\r\n    }));\r\n}","import React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Popup from \"reactjs-popup\";\r\nimport { fetchEntry, filterCount, addToList } from '../actions/entryActions';\r\nimport { getUser } from '../actions/loginActions';\r\nimport '../css/entryList.css';\r\nimport '../css/modal.css';\r\n\r\nclass EntryList extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.fetchEntry();\r\n    }\r\n\r\n    // Generate a 5 character string for index purposes.\r\n    generateRandomID() {\r\n        var randomID = \"\";\r\n        var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n\r\n        for(var i = 0; i < 5; ++i)\r\n            randomID += possible.charAt(Math.floor(Math.random() * possible.length));\r\n\r\n        return randomID;\r\n    }\r\n\r\n    getNextDayString(today) {\r\n        switch(today) {\r\n            case 'mon':\r\n                return 'tue';\r\n            case 'tue':\r\n                return 'wed';\r\n            case 'wed':\r\n                return 'thu';\r\n            case 'thu':\r\n                return 'fri';\r\n            case 'fri':\r\n                return 'sat';\r\n            case 'sat':\r\n                return 'sun';\r\n            case 'sun':\r\n                return 'mon';\r\n            default:\r\n                return 'default';\r\n        }\r\n    }\r\n\r\n    isOpen(entry) {\r\n        // If either day or time is not set, we don't filter.\r\n        if(this.props.filterDay === \"\" || this.props.filterTime === -1) {\r\n            return true;\r\n        }\r\n\r\n        var openTime;\r\n        var closeTime;\r\n\r\n        // In the DB, the 'usual' opening hours are stores in variable 'default'.\r\n        // For other days with a different opening/closing time, they have their own field (ie mon, wed, sun).\r\n        // So, we first check if any of these different hours exist. If not, use the default times.\r\n        if(entry.openhours.hasOwnProperty(this.props.filterDay)) {\r\n            openTime = entry.openhours[this.props.filterDay];\r\n        }\r\n        else {\r\n            openTime = entry.openhours.default;\r\n        }\r\n\r\n        if(entry.closehours.hasOwnProperty(this.props.filterDay)) {\r\n            closeTime = entry.closehours[this.props.filterDay];\r\n        }\r\n        else {\r\n            closeTime = entry.closehours.default;\r\n        }\r\n\r\n        // If the place opens past midnight, we look for next day's closing time, and add more hours to it.\r\n        if(closeTime < openTime) {\r\n            var nextDay = this.getNextDayString(this.props.filterDay);\r\n            if(entry.closehours.hasOwnProperty(nextDay)) {\r\n                closeTime = entry.closehours[nextDay];\r\n            }\r\n            else {\r\n                closeTime = entry.closehours.default;\r\n            }\r\n            // If past midnight, check for the closed times instead, and invert the result.\r\n            return !(openTime >= this.props.filterTime && closeTime < this.props.filterTime+100);\r\n        }\r\n\r\n        // Checks if filter time is between opening and closing hours.\r\n        return openTime <= this.props.filterTime && closeTime > this.props.filterTime+100;\r\n    }\r\n\r\n    renderAddCollectionText() {\r\n\r\n        for(var i = 0; i < 3; ++i) {\r\n            if(this.props.cUser.lists[i].isCreated) {\r\n                return \"Choose a list to add the restaurant to.\";\r\n            }\r\n        }\r\n        return \"Please create at least 1 list before adding restaurants!\";\r\n       \r\n    }\r\n\r\n    renderAddListButton(cID, entryName, closeCallBack) {\r\n        let disp = null;\r\n\r\n        // We don't display the uncreated lists.\r\n        if(!this.props.cUser.lists[cID].isCreated)\r\n            return disp;\r\n\r\n        // Only add if the restaurant does not exist in the list already.\r\n        var doesExist = false;\r\n        for(var i = 0; i < this.props.cUser.lists[cID].restaurants.length; ++i) {\r\n            if(entryName === this.props.cUser.lists[cID].restaurants[i]) {\r\n                doesExist = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if(doesExist) {\r\n            disp = \r\n            <span>\r\n                <Popup lockScroll={true} trigger={<button className={\"modal-button\"+cID}>{this.props.cUser.lists[cID].name}</button>} modal>\r\n                {confirm => (\r\n                    <div>\r\n                        <div className=\"modal-header\">RESTAURANT ALREADY EXIST</div>\r\n                        <div className=\"modal-content\">{entryName} already exists in Collection {this.props.cUser.lists[cID].name}.</div>\r\n                        <span><button className=\"modal-button-ok\" onClick={() => {\r\n                            confirm();\r\n                            closeCallBack();\r\n                            }}>\r\n                            OK</button>\r\n                        </span>\r\n                    </div>\r\n                )}\r\n                </Popup>\r\n            </span>\r\n        }\r\n        else {\r\n            disp = \r\n                <span>\r\n                    <Popup lockScroll={true} trigger={<button className={\"modal-button\"+cID}>{this.props.cUser.lists[cID].name}</button>} modal>\r\n                    {confirm => (\r\n                        <div>\r\n                            <div className=\"modal-header\">RESTAURANT ADDED!</div>\r\n                            <div className=\"modal-content\">{entryName} successfully added to {this.props.cUser.lists[cID].name}!</div>\r\n                            <span><button className=\"modal-button-ok\" onClick={() => {\r\n                                confirm();\r\n                                closeCallBack();\r\n                                this.props.addToList(this.props.cUserEmail, cID, entryName, this.props.getUser);\r\n                                }}>\r\n                                OK</button>\r\n                            </span>\r\n                        </div>\r\n                    )}\r\n                    </Popup>\r\n                </span>\r\n        }\r\n        return disp;\r\n    }\r\n\r\n    renderAddList(entryName) {\r\n        return (\r\n        <Popup lockScroll={true} trigger={<button disabled={!this.props.isLoggedIn} className=\"button\">{this.props.isLoggedIn ? \"Add To Collection\" : \"Login To View\"}</button>} modal>\r\n        {close => (\r\n            <div className=\"modal-section\">\r\n                <div className=\"modal-header\">\r\n                    <span className=\"modal-button-crossicon\" onClick={() => {close()}}>&times;</span>\r\n                    ADD RESTAURANT TO COLLECTION\r\n                </div>\r\n                <div className=\"modal-content\">{this.renderAddCollectionText()}</div>\r\n                    {this.renderAddListButton(0, entryName, close)}\r\n                    {this.renderAddListButton(1, entryName, close)}\r\n                    {this.renderAddListButton(2, entryName, close)}\r\n                </div>\r\n            )}\r\n        </Popup>\r\n        )\r\n    }\r\n\r\n    renderEntry = (entry) => {\r\n        const rID = this.generateRandomID();\r\n\r\n        return (\r\n        <tr key={rID} className=\"tr-entries\">\r\n            <td key={rID+1}>{entry.name}</td>\r\n            <td key={rID+2}>{entry.dispHours}</td>\r\n            <td key={rID+3} style={{textAlign:\"center\"}}>{this.renderAddList(entry.name)}</td>\r\n        </tr>\r\n        )\r\n    }\r\n\r\n    renderHeader() {\r\n        const rID = this.generateRandomID();\r\n        return (\r\n        <tr key={rID}>\r\n            <th key={rID+1} className=\"header-restaurant\">RESTAURANT</th>\r\n            <th key={rID+2} className=\"header-hours\">OPENING HOURS</th>\r\n            <th key={rID+3} style={{textAlign:\"center\"}} className=\"header-support\">COLLECTION</th>\r\n        </tr>\r\n        )\r\n    }\r\n\r\n    renderEntries() {\r\n\r\n        // Filter by name\r\n        if(this.props.filterType === 0 && this.props.filterName !== \"\") {\r\n            const entries = this.props.entries.map( entry => {\r\n                if(entry.name === this.props.filterName) {\r\n                    return this.renderEntry(entry);\r\n                }\r\n                return null;\r\n            })\r\n            return entries;\r\n        }\r\n\r\n        // Filter by day\r\n        if(this.props.filterType === 1) {\r\n            const entries = this.props.entries.map( entry => {\r\n                if(this.isOpen(entry)) {\r\n                    return this.renderEntry(entry);\r\n                }\r\n                return null;\r\n            })\r\n            return entries;\r\n        }\r\n\r\n        // If not both, revert to default list, which shows all entries.\r\n        const entries = this.props.entries.map( entry => {\r\n            return this.renderEntry(entry);\r\n        });\r\n        return entries;\r\n    }\r\n\r\n    render() {\r\n\r\n        const allEntries = this.renderEntries();\r\n        //this.props.filterCount(allEntries.length);\r\n\r\n        return (\r\n        <table style={{textAlign:'left'}}>\r\n            <tbody>\r\n                {this.renderHeader()}\r\n                {allEntries}\r\n            </tbody>\r\n        </table>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    entries: state.entries.items,\r\n    cUser: state.login.cUser,\r\n    cUserEmail: state.login.cUserEmail,\r\n    isLoggedIn: state.login.isLoggedIn,\r\n\r\n    filterName: state.entries.filterName,\r\n    filterDay: state.entries.filterDay,\r\n    filterTime: state.entries.filterTime,\r\n    filterType: state.entries.filterType,\r\n    filterCount: state.entries.filterCount\r\n});\r\n\r\nexport default connect(mapStateToProps, {fetchEntry, filterCount, addToList, getUser})(EntryList);","import React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Popup from \"reactjs-popup\";\r\nimport { initList, shareList, renameList } from '../actions/collectionActions';\r\nimport { getUser } from '../actions/loginActions';\r\nimport '../css/collectionList.css'\r\n\r\nclass CollectionList extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            cID: this.props.id,\r\n            textInput: \"\",\r\n            renameListInput: \"\",\r\n            friendEmail: \"\",\r\n\r\n            displayPopup: false,\r\n            pTitle: \"\",\r\n            pDesc: \"\",\r\n\r\n            // Extra params for if this list is a shared list.\r\n            isShared: this.props.isShared,\r\n            sharedName: this.props.sharedName,\r\n            sharedID: this.props.sharedID,\r\n            sharedEmail: this.props.sharedEmail\r\n        }\r\n        this.createList = this.createList.bind(this);\r\n        this.changeName = this.changeName.bind(this);\r\n        this.shareWithFriend = this.shareWithFriend.bind(this);\r\n        this.createListTextChange = this.createListTextChange.bind(this);\r\n        this.shareListUserChange = this.shareListUserChange.bind(this);\r\n        this.renameListChange = this.renameListChange.bind(this);\r\n    }\r\n\r\n    // Creates a new list.\r\n    createList(closeCallBack) {\r\n        if(this.state.textInput == null)\r\n            return;\r\n\r\n        this.props.initList(this.props.cUserEmail, this.state.cID, this.state.textInput, this.props.getUser);\r\n        closeCallBack();\r\n    }\r\n\r\n    changeName(closeCallBackMain, closeCallBackSub) {\r\n        return (\r\n            <Popup lockScroll={true} trigger={<button className=\"modal-button-ok\" disabled={this.state.renameListInput===\"\"}>Change</button>} modal>\r\n            {close => (\r\n                <div className=\"modal-section\">\r\n                    <div className=\"modal-header\">\r\n                        <span className=\"modal-button-crossicon\" onClick={() => {close()}}>&times;</span>\r\n                        COLLECTION RENAMED\r\n                    </div>\r\n                    <div className=\"modal-content\">Collection successfully renamed!</div>\r\n                        <span><button className=\"modal-button-ok\" onClick={() => {\r\n                            \r\n                            if(this.state.isShared) {\r\n                                this.props.renameList(this.state.sharedEmail, this.state.cID, this.state.renameListInput);\r\n                            }\r\n                            else {\r\n                                this.props.renameList(this.props.cUserEmail, this.state.cID, this.state.renameListInput, this.props.getUser);\r\n                            }\r\n                            close();\r\n                            closeCallBackSub();\r\n                            closeCallBackMain();\r\n                        }}>\r\n                        Back</button></span>\r\n                </div>\r\n            )}\r\n        </Popup>\r\n        )\r\n    }\r\n\r\n    renameList(closeCallBack) {\r\n        return (\r\n            <Popup lockScroll={true} trigger={<button className=\"modal-button-ok\">Rename</button>} modal>\r\n                {close => (\r\n                    <div className=\"modal-section\">\r\n                        <div className=\"modal-header\">\r\n                            <span className=\"modal-button-crossicon\" onClick={() => {close()}}>&times;</span>\r\n                            RENAME COLLECTION\r\n                        </div>\r\n                        <div className=\"modal-content\">Rename Collection:</div>\r\n                            <div><input className=\"modal-input\" type=\"text\" name=\"Share Name\" value={this.state.renameListInput} onChange={this.renameListChange}/></div>\r\n                            {this.changeName(closeCallBack, close)}\r\n                    </div>\r\n                )}\r\n            </Popup>\r\n        )\r\n    }\r\n\r\n    // Displays the current list\r\n    viewList() {\r\n\r\n        // If the clicked list does not exist, we create one instead.\r\n        if(!this.props.cUser.lists[this.state.cID].isCreated) {\r\n            return this.createList();\r\n        }\r\n\r\n        var allRestaurants = this.props.cUser.lists[this.state.cID].restaurants.map( (restaurant, index) => {\r\n            return <div key={index}>{restaurant}</div>;\r\n        });\r\n\r\n        if(allRestaurants.length === 0) {\r\n            allRestaurants = \"This collection is empty.\";\r\n        }\r\n        return allRestaurants;\r\n    }\r\n\r\n    viewSharedList() {\r\n\r\n        var tmpRestaurants = [];\r\n        var foundUser = false;\r\n\r\n        for(var i = 0; i < this.props.userIDs.length; ++i) {\r\n            if(foundUser) {\r\n                break;\r\n            }\r\n            if(this.props.userIDs[i] === this.state.sharedEmail) {\r\n                foundUser = true;\r\n                for(var j = 0; j < this.props.users[i].lists[this.state.cID].restaurants.length; ++j) {\r\n                    tmpRestaurants.push(this.props.users[i].lists[this.state.cID].restaurants[j]);\r\n                }\r\n            }\r\n        }\r\n\r\n        var allRestaurants = tmpRestaurants.map( (restaurant, index) => {\r\n            return <div key={index}>{restaurant}</div>\r\n        });\r\n\r\n        if(tmpRestaurants.length === 0) {\r\n            allRestaurants = \"This collection is empty.\";\r\n        }\r\n        return allRestaurants;\r\n    }\r\n\r\n    // Share list with friend\r\n    shareWithFriend = () => {\r\n\r\n        // Check if sharing with self\r\n        if(this.state.friendEmail === this.props.cUserEmail) {\r\n            this.setState({\r\n                pTitle: \"SHARING ERROR\",\r\n                pDesc: \"Cannot share collections with yourself!\",\r\n                displayPopup: true\r\n            });\r\n            return;\r\n        }\r\n\r\n        // Check if the user exists.\r\n        var friendExists = false;\r\n        for(var i = 0; i < this.props.userIDs.length; ++i) {\r\n            if(this.props.userIDs[i] === this.state.friendEmail) {\r\n                friendExists = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if(friendExists) {\r\n            // Check if the user already has the list.\r\n            var hasList = false;\r\n            for(i = 0; i < this.props.cUser.shares.length; ++i) {\r\n                if(this.props.cUser.shares[i].email === this.state.friendEmail &&\r\n                    this.props.cUser.shares[i].cID === this.state.cID ) {\r\n                    hasList = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if(hasList) {\r\n                this.setState({\r\n                    pTitle: \"SHARING ERROR\",\r\n                    pDesc: \"The user already has this list!\",\r\n                    displayPopup: true\r\n                });\r\n                return;\r\n            }\r\n\r\n            // Insert if nothing wrong with input\r\n            this.setState({\r\n                pTitle: \"SHARING SUCCESSFUL\",\r\n                pDesc: this.props.cUser.lists[this.state.cID].name + \" collection successfully shared with \" + this.state.friendEmail + \"!\",\r\n                displayPopup: true\r\n            });\r\n\r\n            this.props.shareList(this.props.cUserEmail, this.state.friendEmail, this.state.cID);\r\n            return;\r\n        }\r\n        else {\r\n            this.setState({\r\n                pTitle: \"CANNOT FIND USER\",\r\n                pDesc: \"Cannot find user \" + this.state.friendEmail + \"!\",\r\n                displayPopup: true\r\n            });\r\n        }\r\n    }\r\n\r\n    getStyling() {\r\n        if(this.state.isShared) {\r\n            return \"list-button-shared\";\r\n        }\r\n        return \"list-button\" + this.state.cID;\r\n    }\r\n\r\n    renameListChange(event) {\r\n        this.setState({renameListInput: event.target.value});\r\n    }\r\n\r\n    shareListUserChange(event) {\r\n        this.setState({friendEmail: event.target.value});\r\n    }\r\n\r\n    createListTextChange(event) {\r\n        this.setState({textInput: event.target.value});\r\n    }\r\n\r\n    processListSelection() {\r\n        let disp = null;\r\n\r\n        // Shared list\r\n        if(this.state.isShared) {\r\n            disp =  \r\n            close => (\r\n                <div className=\"modal-section\">\r\n                    <div className=\"modal-header\">{this.state.sharedName}\r\n                        <span className=\"modal-button-crossicon\" onClick={() => {close()}}>&times;</span>\r\n                        &nbsp;collection\r\n                    </div>\r\n                    <div className=\"modal-content\">{this.viewSharedList()}</div>\r\n                    {this.renameList(close)}\r\n                    <span><button className=\"modal-button-ok\" onClick={() => {close()}}>Close</button></span>\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n\r\n            // If there is a list, we view it. Otherwise, we create one.\r\n            if(this.props.cUser.lists[this.state.cID].isCreated) {\r\n                disp =  \r\n                close => (\r\n                    <div className=\"modal-section\">\r\n                        <div className=\"modal-header\">{this.props.cUser.lists[this.state.cID].name}\r\n                            <span className=\"modal-button-crossicon\" onClick={() => {close()}}>&times;</span>\r\n                            &nbsp;collection\r\n                        </div>\r\n                        <div className=\"modal-content\">{this.viewList()}</div>\r\n                        {this.renderShareButton(close)}\r\n                        {this.renameList(close)}\r\n                        <span><button className=\"modal-button-ok\" onClick={() => {close()}}>Close</button></span>\r\n                    </div>\r\n                )\r\n            }\r\n            else {\r\n                disp = \r\n                close => (\r\n                    <div className=\"modal-section\">\r\n                        <div className=\"modal-header\">\r\n                            <span className=\"modal-button-crossicon\" onClick={() => {close()}}>&times;</span>\r\n                            CREATE NEW COLLECTION\r\n                        </div>\r\n                        <div className=\"modal-content\">Enter a name for the new collection</div>\r\n                        <div><input className=\"modal-input\" type=\"text\" name=\"Collection Name\" value={this.state.textInput} onChange={this.createListTextChange}/></div>\r\n                        <span><button className=\"modal-button-ok\" disabled={this.state.textInput===\"\"} onClick={() => this.createList(close)}>Create</button></span>\r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n        return disp;\r\n    }\r\n\r\n    renderShareButton(closeCallBack) {\r\n        return (\r\n            <Popup lockScroll={true} trigger={<button className=\"modal-button-share\">Share</button>} modal>\r\n            {close => (\r\n                <div className=\"modal-section\">\r\n                    <div className=\"modal-header\">\r\n                        <span className=\"modal-button-crossicon\" onClick={() => {close()}}>&times;</span>\r\n                        SHARE COLLECTION\r\n                    </div>\r\n                    <div className=\"modal-content\">Who do you want to share the list with?</div>\r\n                        <div><input className=\"modal-input\" type=\"text\" name=\"Share Name\" value={this.state.friendEmail} onChange={this.shareListUserChange}/></div>\r\n                        <span><button className=\"modal-button-ok\" disabled={this.state.friendEmail===\"\"} onClick={() => this.shareWithFriend()}>Share</button></span>\r\n                        {this.displayGenericPopup()}\r\n                </div>\r\n            )}\r\n        </Popup>\r\n        )\r\n    }\r\n\r\n    displayGenericPopup() {\r\n        if(this.state.displayPopup) {\r\n            return (\r\n                <Popup lockScroll={true} open={this.state.displayPopup} modal>\r\n                {close => (\r\n                    <div className=\"modal-section\">\r\n                        <div className=\"modal-header\">\r\n                            <span className=\"modal-button-crossicon\" onClick={() => {close()}}>&times;</span>\r\n                            {this.state.pTitle}\r\n                        </div>\r\n                        <div className=\"modal-content\">{this.state.pDesc}<br/>&nbsp;</div>\r\n                            <span><button className=\"modal-button-ok\" disabled={this.state.createListTextChange===\"\"} onClick={() => {\r\n                                this.setState({displayPopup: false});\r\n                                close();\r\n                                }}>\r\n                                Back\r\n                            </button></span>\r\n                    </div>\r\n                )}\r\n                </Popup>\r\n            )\r\n        }\r\n    }\r\n\r\n    // Check if cUser is popoulated before trying to render.\r\n    renderListName() {\r\n        if(this.state.isShared) {\r\n            return this.state.sharedName;\r\n        }\r\n        if(this.props.cUser && this.props.cUser.lists && this.props.cUser.lists[this.state.cID] && this.props.cUser.lists[this.state.cID].name)\r\n            return this.props.cUser.lists[this.state.cID].name;\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Popup lockScroll={true} trigger={<button className={this.getStyling()} onClick={() => this.onClickList()}>{this.renderListName()}</button>} modal>\r\n                {this.processListSelection()}\r\n            </Popup>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    users: state.collections.items,\r\n    userIDs: state.collections.IDs,\r\n    rList: state.collections.rList,\r\n    cUser: state.login.cUser,\r\n    cUserEmail: state.login.cUserEmail,\r\n});\r\n\r\nexport default connect(mapStateToProps, {initList, shareList, renameList, getUser})(CollectionList);","import { FETCH_USERS, GET_SHARE_LIST, ADD_SHARE_LIST } from './types';\r\nimport db from '../components/db';\r\n\r\nexport const fetchUsers = () => dispatch => {\r\n\r\n    const allUsers = [];\r\n    const allIDs = [];\r\n    db.collection(\"users\").get().then(snapshot => {\r\n        snapshot.docs.forEach(doc => {\r\n            let uData = doc.data();\r\n            let uID = doc.id;\r\n            allUsers.push(uData);\r\n            allIDs.push(uID);\r\n        })\r\n    })\r\n    .then(() => dispatch({\r\n        type: FETCH_USERS,\r\n        payload: allUsers,\r\n        payloadID: allIDs\r\n    }));\r\n}\r\n\r\nexport const initList = (cUserEmail, cID, cName, callBack) => dispatch => {\r\n\r\n    var user = {};\r\n    db.collection(\"users\").doc(cUserEmail).get()\r\n    .then( function(doc) {\r\n        if(doc.exists) {\r\n            user = doc.data(); \r\n        }   \r\n    })\r\n    .then(() => {\r\n        user.lists[cID].isCreated = true;\r\n        user.lists[cID].name = cName;\r\n        db.collection(\"users\").doc(cUserEmail).set(user);\r\n    })\r\n    .then(() => {\r\n        callBack(cUserEmail);\r\n    });\r\n}\r\n\r\nexport const renameList = (cUserEmail, cID, newListName, callBack = null) => dispatch => {\r\n\r\n    console.log(cUserEmail + \", \" + cID + \", \" + newListName);\r\n    let user = {};\r\n    db.collection(\"users\").doc(cUserEmail).get().then( function(doc) {\r\n        if(doc.exists) {\r\n            user = doc.data();\r\n        }   \r\n    })\r\n    .then(() => {\r\n        user.lists[cID].name = newListName;\r\n    })\r\n    .then(() => {\r\n        db.collection(\"users\").doc(cUserEmail).set(user);\r\n    })\r\n    .then(() => {\r\n        if(callBack) {\r\n            callBack(cUserEmail);\r\n        }\r\n    })\r\n}\r\n\r\nexport const shareList = (cUserEmail, cFriendEmail, fID, callBack = null) => dispatch => {\r\n\r\n    var user = {};\r\n    var friendData = {\r\n        email: cUserEmail,\r\n        cID: fID\r\n    };\r\n\r\n    db.collection(\"users\").doc(cFriendEmail).get().then( function(doc) {\r\n        if(doc.exists) {\r\n            user = doc.data();\r\n        }   \r\n    })\r\n    .then(() => {\r\n        user.shares.push(friendData);\r\n        db.collection(\"users\").doc(cFriendEmail).set(user);\r\n    })\r\n    .then(() => {\r\n        if(callBack)\r\n            callBack(cFriendEmail);\r\n    });\r\n}\r\n\r\nexport const getFriendShareList = (cUserEmail) => dispatch => {\r\n\r\n    var allShared = [];\r\n    db.collection(\"users\").doc(cUserEmail).get().then(function(doc) {\r\n        if(doc.exists) {\r\n            allShared = doc.data().shares;\r\n        }\r\n    })\r\n    .then(() => dispatch({\r\n        type: GET_SHARE_LIST,\r\n        payload: allShared,\r\n    }))\r\n}\r\n\r\nexport const addShareList = (cList, newEntry) => dispatch => {\r\n\r\n    var rList = cList;\r\n    rList.push(newEntry);\r\n    dispatch({\r\n        type: ADD_SHARE_LIST,\r\n        payload: rList\r\n    });\r\n}\r\n","import React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Popup from \"reactjs-popup\";\r\nimport { loginUser, addUser, updateUser } from '../actions/loginActions';\r\nimport { getFriendShareList } from '../actions/collectionActions';\r\nimport '../css/login.css';\r\nimport '../css/modal.css';\r\nimport db from '../components/db';\r\n\r\nclass Login extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            cUsername: \"\",\r\n            inputEmail: \"johnsmith@gmail.com\"\r\n        }\r\n        this.onClickLogin = this.onClickLogin.bind(this);\r\n        this.createListEmailChange = this.createListEmailChange.bind(this);\r\n    }\r\n\r\n    // Logs the user in if he exists in database.\r\n    login(userEmail) {\r\n        db.collection(\"users\").doc(userEmail).get().then((doc) => {\r\n            this.props.updateUser(doc.data(), userEmail);\r\n        })\r\n        .then(() => {\r\n            this.setState({cUsername: this.props.cUser.name}, () => {\r\n                this.props.loginUser(true);\r\n            });\r\n        })\r\n        .then(() => {\r\n                this.props.getFriendShareList(userEmail);\r\n        })\r\n    }\r\n\r\n    // Login method\r\n    onClickLogin = (closeCallBack) => {\r\n\r\n        var userName;\r\n        // Find userin db. If cannot find, create new entry.\r\n        var isNewUser = true;\r\n        for(var i = 0; i < this.props.noofUsers; ++i ) {\r\n            if(this.state.inputEmail === this.props.userIDs[i]) {\r\n                isNewUser = false;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if(isNewUser) {\r\n            // Name input for new user\r\n            if(this.state.inputEmail.search(\"@\") === -1)\r\n                userName = this.state.inputEmail;\r\n            else {\r\n                userName = this.state.inputEmail.substring(0, this.state.inputEmail.search(\"@\"));\r\n            }\r\n\r\n            this.setState({cUsername: userName}, () => {\r\n                this.props.addUser(this.state.inputEmail, userName, this.props.loginUser);\r\n            });\r\n        }\r\n        else {\r\n            this.login(this.state.inputEmail);\r\n        }\r\n        closeCallBack();\r\n    }\r\n\r\n    // A simple feedback message to the user's status.\r\n    renderUserLabel() {\r\n        if(this.props.isLoggedIn) {\r\n            return \"Welcome, \" + this.state.cUsername;\r\n        }\r\n        return \"Hello, Guest\";\r\n    }\r\n\r\n    createListEmailChange(event) {\r\n        this.setState({inputEmail: event.target.value});\r\n    }\r\n\r\n    // Only show the button if the user is not logged in.\r\n    renderLoginButton() {\r\n        if(this.props.isLoggedIn) {\r\n            return null;\r\n        }\r\n        return (\r\n            <Popup lockScroll={true} trigger={<button className=\"login-button\" onClick={() => this.onClickLogin()}>Log In</button>} modal>\r\n                {close => (\r\n                    <div className=\"modal-section\" style={{textAlign:\"center\"}}>\r\n                        <div className=\"modal-header\">\r\n                            LOG IN/SIGN UP\r\n                            <span className=\"modal-button-crossicon\" onClick={() => {close()}}>&times;</span>\r\n                        </div>\r\n                        <div className=\"modal-content\">Enter your email address</div>\r\n                        <div><input className=\"modal-input\" type=\"text\"  name=\"Login\" value={this.state.inputEmail} onChange={this.createListEmailChange}/></div>\r\n                        <span><button className=\"modal-button-ok\" onClick={() => {this.onClickLogin(close)}}>Log In</button></span>\r\n                    </div>\r\n            )}\r\n            </Popup>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <tr>\r\n                <th colSpan=\"50%\" className=\"login-header\">{this.renderLoginButton()}</th>\r\n                <th colSpan=\"50%\" className=\"login-userlabel\">{this.renderUserLabel()}</th>\r\n            </tr>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    noofUsers: state.collections.items.length,\r\n    userIDs: state.collections.IDs,\r\n    cUser: state.login.cUser,\r\n    isLoggedIn: state.login.isLoggedIn\r\n});\r\n\r\nexport default connect(mapStateToProps, {loginUser, addUser, updateUser, getFriendShareList})(Login);","import React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchUsers, addShareList } from '../actions/collectionActions';\r\nimport '../css/collection.css'\r\nimport  CollectionList  from './collectionList';\r\nimport Login from './login';\r\n\r\nclass Collection extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.fetchUsers();\r\n    }\r\n\r\n    renderEachShared = (shareList, index) => {\r\n\r\n        if(this.props.shareList.length === 0)\r\n            return;\r\n\r\n        var collectionName;\r\n        for(var i = 0; i < this.props.userIDs.length; ++i) {\r\n            if(this.props.userIDs[i] === shareList.email) {\r\n                collectionName = this.props.users[i].lists[shareList.cID].name;\r\n            }\r\n        }\r\n\r\n        console.log(collectionName);\r\n\r\n        return (\r\n        <tr key={index}>\r\n            <td colSpan=\"35%\"><CollectionList\r\n                className=\"list-button-shared\"\r\n                id={shareList.cID}\r\n                isShared={true}\r\n                sharedName={collectionName}\r\n                sharedID={index}\r\n                sharedEmail={shareList.email}/></td>\r\n            <td colSpan=\"65%\">by {shareList.email}</td>\r\n        </tr>\r\n\r\n        )\r\n    }\r\n\r\n    renderAllShared() {\r\n        const allLists = this.props.shareList.map( (sList, index) => {\r\n                return this.renderEachShared(sList, index);\r\n        });\r\n        return allLists;\r\n    }\r\n\r\n    // Displays the header of the table, which differs according to sign-in status.\r\n    renderCollectionHeader() {\r\n        \r\n        if(!this.props.isLoggedIn) {\r\n            return (\r\n                <tr>\r\n                    <th colSpan=\"100%\" className=\"collection-header-loggedout\" style={{textAlign:\"center\"}}>Login to see your collections!</th>\r\n                </tr>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <tr>\r\n                <th colSpan=\"100%\" className=\"collection-header\">YOUR COLLECTIONS</th>\r\n            </tr>\r\n        )\r\n    }\r\n\r\n    // Renders the Collections buttons.\r\n    renderCollectionTable() {\r\n\r\n        if(!this.props.isLoggedIn)\r\n            return null;\r\n\r\n        return (\r\n            <tr>\r\n                <td colSpan=\"33%\"><CollectionList id=\"0\" className=\"list-button0\" isFriend={false} /></td>\r\n                <td colSpan=\"33%\"><CollectionList id=\"1\" className=\"list-button1\" isFriend={false}/></td>\r\n                <td colSpan=\"34%\"><CollectionList id=\"2\" className=\"list-button2\" isFriend={false}/></td>\r\n            </tr>\r\n        )\r\n    }\r\n\r\n    // Displays the header of the table, which differs according to sign-in status.\r\n    renderSharedHeader() {\r\n        if(!this.props.isLoggedIn) {\r\n            return null;\r\n        }\r\n\r\n        if(this.props.cUser.shares.length === 0)\r\n            return null;\r\n\r\n        return (\r\n            <tr>\r\n                <th colSpan=\"100%\" className=\"collection-header\">SHARED COLLECTIONS</th>\r\n            </tr>\r\n        )\r\n    }\r\n\r\n    // Renders the Collections buttons.\r\n    renderSharedTable() {\r\n        if(!this.props.isLoggedIn)\r\n            return null;\r\n\r\n        if(this.props.cUser.shares.length === 0)\r\n            return null;\r\n\r\n        return this.renderAllShared();\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <table> \r\n                <tbody>\r\n                    <Login/>\r\n                    {this.renderCollectionHeader()}\r\n                    {this.renderCollectionTable()}\r\n                    {this.renderSharedHeader()}\r\n                    {this.renderSharedTable()}\r\n                </tbody>\r\n            </table>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    users: state.collections.items,\r\n    userIDs: state.collections.IDs,\r\n    shareList: state.collections.shareList,\r\n    isLoggedIn: state.login.isLoggedIn,\r\n    cUser: state.login.cUser\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, {fetchUsers, addShareList})(Collection);","import React, { Component } from 'react';\nimport { Provider } from 'react-redux';\nimport store from './components/store';\nimport Filter from './components/filter'\nimport EntryList from './components/entryList';\nimport Collection from './components/collection';\nimport './css/App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"app\">\n          <header className=\"app-header\">\n            <h2>\n              IS IT OPEN?\n            </h2>\n            <div className=\"subtitle\">\n              Your one stop service for hunger pangs\n            </div>\n          </header>\n\n          <Collection/>\n          <Filter/>\n          <EntryList/>\n\n        </div>\n      </Provider>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}